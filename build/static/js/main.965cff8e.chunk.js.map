{"version":3,"sources":["images/Imagen1-620x264.png","images/background-phone.jpg","app/static_elements/NavBar.js","app/static_elements/MainBody.js","config/axios.js","app/main_page/MainPage.js","app/success/Success.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavVar","className","role","id","href","src","logo","alt","MainBody","props","NavBar","style","backgroundImage","background","backgroundRepeat","backgroundPosition","backgroundSize","children","instance","axios","create","baseURL","process","MainPage","handleFieldChange","event","setState","target","value","handleRegister","a","Object","keys","state","reduce","acc","key","preventDefault","request","method","url","data","history","push","response","status","hasError","name","phone","email","rut","type","placeholder","this","onChange","minLength","required","htmlFor","data-error","onClick","Component","Success","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,8C,kQCgB5BC,MAZf,WACE,OACE,yBAAKC,UAAU,QAAQC,KAAK,cAC1B,yBAAKD,UAAU,yBACb,uBAAGE,GAAG,iBAAiBC,KAAK,KAAKH,UAAU,cACzC,yBAAKI,IAAKC,IAAMC,IAAI,OAAON,UAAU,a,iBCehCO,MAlBf,SAAmBC,GACjB,OAEE,6BACE,kBAACC,EAAD,MACA,yBAAKT,UAAU,+BAA+BU,MAAO,CACnDC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,mBAAoB,aACpBC,eAAgB,UAEhB,6BACCP,EAAMQ,Y,QCVAC,E,OAJEC,EAAMC,OAAO,CAC5BC,QAHcC,yDC8IDC,E,kDAxIb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAURe,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eACGD,EAAME,OAAOxB,GAAKsB,EAAME,OAAOC,SAbjB,EAiBnBC,eAjBmB,uCAiBF,WAAOJ,GAAP,SAAAK,EAAA,yDACIC,OAAOC,KAAK,EAAKC,OAAOC,QAAO,SAACC,EAAKC,GAAN,OAAcD,KAAS,EAAKF,MAAMG,MAAM,GAD3E,wDAIfX,EAAMY,iBAJS,kBAOPlB,EAAMmB,QAAQ,CAClBC,OAAQ,OACRC,IAAK,yBACLC,KAAM,EAAKR,QAVA,OAYb,EAAKxB,MAAMiC,QAAQC,KAAK,YAZX,kDAce,MAAxB,KAAIC,SAASC,QACf,EAAKnB,SAAS,CAAEoB,UAAU,IAff,0DAjBE,sDAGjB,EAAKb,MAAQ,CACXc,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,IAAK,IAPU,E,qDAsCjB,OACE,kBAAC,EAAD,KACE,yBAAKjD,UAAU,aAEb,wBAAIA,UAAU,4BAAd,aAAmD,6BAAnD,gBACA,yBAAKA,UAAU,cACb,0BAAMA,UAAU,mCAAhB,gEAGF,yBAAKA,UAAU,OACb,0BAAMA,UAAU,WACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,2BACEE,GAAG,OACHgD,KAAK,OACLlD,UAAU,iBACVmD,YAAY,mBACZxB,MAAOyB,KAAKpB,MAAMc,KAClBO,SAAUD,KAAK7B,kBACf+B,UAAU,IACVC,UAAQ,IAEV,2BAAOC,QAAQ,OAAOxD,UAAU,SAC9B,0BAAMA,UAAU,cAAhB,UAA0C,0BAAMA,UAAU,YAAhB,MAE5C,0BAAMA,UAAU,cAAcyD,aAAW,qCAE3C,yBAAKzD,UAAU,0BACb,2BACEE,GAAG,QACHgD,KAAK,OACLlD,UAAU,iBACVmD,YAAY,qBACZxB,MAAOyB,KAAKpB,MAAMe,MAClBM,SAAUD,KAAK7B,kBACf+B,UAAU,IACVC,UAAQ,IAEV,2BAAOC,QAAQ,QAAQxD,UAAU,SAC/B,0BAAMA,UAAU,cAAhB,eAA4C,0BAAMA,UAAU,YAAhB,MAE9C,0BAAMA,UAAU,cAAcyD,aAAW,qCAE3C,yBAAKzD,UAAU,2BACb,2BACEE,GAAG,QACHgD,KAAK,QACLlD,UAAU,iBACVmD,YAAY,uBACZxB,MAAOyB,KAAKpB,MAAMgB,MAClBK,SAAUD,KAAK7B,kBACf+B,UAAU,IACVC,UAAQ,IAEV,2BAAOC,QAAQ,QAAQxD,UAAU,SAC/B,0BAAMA,UAAU,cAAhB,UAA0C,0BAAMA,UAAU,YAAhB,MAE5C,0BAAMA,UAAU,cAAcyD,aAAW,oCAE3C,yBAAKzD,UAAU,0BACb,2BACEE,GAAG,MACHgD,KAAK,OACLlD,UAAU,iBACVmD,YAAY,mBACZxB,MAAOyB,KAAKpB,MAAMiB,IAClBI,SAAUD,KAAK7B,kBACf+B,UAAU,IACVC,UAAQ,IAEV,2BAAOC,QAAQ,MAAMxD,UAAU,UAC7B,0BAAMA,UAAU,cAAhB,OAAuC,0BAAMA,UAAU,YAAhB,MAEzC,0BAAMA,UAAU,cAAcyD,aAAW,qCAE3C,yBAAKzD,UAAU,WACb,4BACE0D,QAASN,KAAKxB,eACd1B,GAAG,kBACHF,UAAU,oDAHZ,iBAQFoD,KAAKpB,MAAMa,UAAY,yBAAK7C,UAAU,OACtC,yBAAKA,UAAU,kBACb,0BAAMA,UAAU,iCAAhB,kD,GA/HK2D,aCcRC,MAbf,WACE,OACE,kBAAC,EAAD,KACE,yBAAK5D,UAAU,aACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,4BAAd,SACA,kBAAC,IAAD,CAAM6D,GAAG,IAAI7D,UAAU,oDAAvB,oB,MCUK8D,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,IAAIC,UAAW1C,OCLf2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.965cff8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Imagen1-620x264.37880436.png\";","module.exports = __webpack_public_path__ + \"static/media/background-phone.4899c74a.jpg\";","import React from 'react';\n\nimport logo from '../../images/Imagen1-620x264.png';\n\nfunction NavVar () {\n  return (\n    <nav className=\"white\" role=\"navigation\">\n      <div className=\"nav-wrapper container\">\n        <a id=\"logo-container\" href=\"!#\" className=\"brand-logo\">\n          <img src={logo} alt=\"Logo\" className=\"logo\"/>\n        </a>\n      </div>\n    </nav>\n  );\n}\n\nexport default NavVar","import React from 'react';\n\nimport NavBar from './NavBar';\n\nimport background from '../../images/background-phone.jpg';\n\nfunction MainBody (props) {\n  return (\n\n    <div>\n      <NavBar/>\n      <div className=\"section-full-page no-pad-bot\" style={{\n        backgroundImage: `url(${background})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center-top',\n        backgroundSize: 'cover'\n      }}>\n        <br/>\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default MainBody","import axios from 'axios';\n\nconst baseURL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\n\nconst instance = axios.create({\n  baseURL,\n});\n\nexport default instance;\n","import React, { Component } from 'react';\n\nimport MainBody from '../static_elements/MainBody';\n\nimport axios from '../../config/axios';\n\nclass MainPage extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      phone: '',\n      email: '',\n      rut: '',\n    };\n  }\n\n  handleFieldChange = (event) => {\n    this.setState({\n      [event.target.id]: event.target.value,\n    });\n  };\n\n  handleRegister = async (event) => {\n    const canRequest = Object.keys(this.state).reduce((acc, key) => acc && !!this.state[key], true);\n    if (!canRequest) return;\n\n    event.preventDefault();\n\n    try {\n      await axios.request({\n        method: 'post',\n        url: '/landing/subscriptions',\n        data: this.state,\n      });\n      this.props.history.push('/success');\n    } catch (err) {\n      if (err.response.status === 409) {\n        this.setState({ hasError: true });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <MainBody>\n        <div className=\"container\">\n\n          <h3 className=\"header center white-text\">Cursos de <br/> Verano +NEM</h3>\n          <div className=\"row center\">\n            <span className=\"header col s12 light white-text\">No dejes pasar esta increile oportunidad. Inscribite acá</span>\n          </div>\n\n          <div className=\"row\">\n            <form className=\"col s12\">\n              <div className=\"row\">\n                <div className=\"input-field col s12 m6 \">\n                  <input\n                    id=\"name\"\n                    type=\"text\"\n                    className=\"validate field\"\n                    placeholder=\"Ej. Jose Canseco\"\n                    value={this.state.name}\n                    onChange={this.handleFieldChange}\n                    minLength=\"1\"\n                    required\n                  />\n                  <label htmlFor=\"name\" className=\"label\">\n                    <span className=\"white-text\">Nombre</span><span className=\"red-text\">*</span>\n                  </label>\n                  <span className=\"helper-text\" data-error=\"Este campo no puede estar vacio\"/>\n                </div>\n                <div className=\"input-field col s12 m6\">\n                  <input\n                    id=\"phone\"\n                    type=\"text\"\n                    className=\"validate field\"\n                    placeholder=\"Ej. +569 3772 9376\"\n                    value={this.state.phone}\n                    onChange={this.handleFieldChange}\n                    minLength=\"1\"\n                    required\n                  />\n                  <label htmlFor=\"phone\" className=\"label\">\n                    <span className=\"white-text\">Teléfono</span><span className=\"red-text\">*</span>\n                  </label>\n                  <span className=\"helper-text\" data-error=\"Este campo no puede estar vacio\"/>\n                </div>\n                <div className=\"input-field col s12 m6 \">\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"validate field\"\n                    placeholder=\"Ej. correo@gmail.com\"\n                    value={this.state.email}\n                    onChange={this.handleFieldChange}\n                    minLength=\"1\"\n                    required\n                  />\n                  <label htmlFor=\"email\" className=\"label\">\n                    <span className=\"white-text\">Correo</span><span className=\"red-text\">*</span>\n                  </label>\n                  <span className=\"helper-text\" data-error=\"Debes ingresar un email valido\"/>\n                </div>\n                <div className=\"input-field col s12 m6\">\n                  <input\n                    id=\"rut\"\n                    type=\"text\"\n                    className=\"validate field\"\n                    placeholder=\"Ej. 26.492.283-1\"\n                    value={this.state.rut}\n                    onChange={this.handleFieldChange}\n                    minLength=\"1\"\n                    required\n                  />\n                  <label htmlFor=\"rut\" className=\" label\">\n                    <span className=\"white-text\">RUT</span><span className=\"red-text\">*</span>\n                  </label>\n                  <span className=\"helper-text\" data-error=\"Este campo no puede estar vacio\"/>\n                </div>\n                <div className=\"col s12\">\n                  <button\n                    onClick={this.handleRegister}\n                    id=\"register-button\"\n                    className=\"btn-large waves-effect waves-light teal accent-4\">\n                    Inscribirse\n                  </button>\n                </div>\n              </div>\n              { this.state.hasError && <div className=\"row\">\n                <div className=\"col s12 center\">\n                  <span className=\"header col s12 light red-text\">Estos datos ya han sido registrados.</span>\n                </div>\n              </div> }\n            </form>\n          </div>\n        </div>\n      </MainBody>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport {\n  Link,\n} from \"react-router-dom\";\n\nimport MainBody from '../static_elements/MainBody';\n\nfunction Success() {\n  return (\n    <MainBody>\n      <div className=\"container\">\n        <div className=\"row center\">\n          <h3 className=\"header center white-text\">Listo</h3>\n          <Link to=\"/\" className=\"btn-large waves-effect waves-light teal accent-4\">Volver atras</Link>\n        </div>\n      </div>\n    </MainBody>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport MainPage from './main_page/MainPage';\nimport Success from './success/Success';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/success\" component={Success} />\n        <Route path=\"/\" component={MainPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}